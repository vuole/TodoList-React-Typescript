[{"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\index.tsx":"1","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\reportWebVitals.ts":"2","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\App.tsx":"3","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\ContentTodoList.tsx":"4","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\HeaderTodoList.tsx":"5","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\FooterTodoList.tsx":"6","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\ModalAddTodo.tsx":"7","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\DataTodoListRow.tsx":"8","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\AlertDialog.tsx":"9","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\service\\todo-service.tsx":"10"},{"size":698,"mtime":1610522695170,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":2031,"mtime":1610556628727,"results":"14","hashOfConfig":"12"},{"size":843,"mtime":1609967184110,"results":"15","hashOfConfig":"12"},{"size":1977,"mtime":1609966092482,"results":"16","hashOfConfig":"12"},{"size":1299,"mtime":1609959730586,"results":"17","hashOfConfig":"12"},{"size":6078,"mtime":1610556124286,"results":"18","hashOfConfig":"12"},{"size":3928,"mtime":1610554660409,"results":"19","hashOfConfig":"12"},{"size":2454,"mtime":1610556124020,"results":"20","hashOfConfig":"12"},{"size":904,"mtime":1610528452514,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"9l6dzx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\index.tsx",[],["46","47"],"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\reportWebVitals.ts",[],"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\App.tsx",["48","49"],"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\ContentTodoList.tsx",[],"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\HeaderTodoList.tsx",["50"],"import '../App.css';\r\nimport React, { useRef, useState } from 'react';\r\nimport ModalAddTodo from './ModalAddTodo';\r\nimport { PropsHeaderTodoList } from '../model/type/todo';\r\nimport { Todo } from '../model/type/todo';\r\n\r\nfunction HeaderTodoList(props: PropsHeaderTodoList) {\r\n    const searchHeaderEl = useRef(document.createElement(\"div\"));\r\n    const inputEl = useRef(document.createElement(\"input\"));\r\n    const [keySearch, setKeySearch] = useState(\"\");\r\n\r\n    const onSearchActiveClick = () => {\r\n        searchHeaderEl.current.style.display = \"flex\";\r\n        inputEl.current.focus();\r\n    };\r\n\r\n    const onSearchHiddenClick = () => {\r\n        searchHeaderEl.current.style.display = \"none\";\r\n    };\r\n\r\n    const handleChangeInput = (event: any) => {\r\n        setKeySearch(event.target.value);\r\n    };\r\n\r\n    const searchTodo = () => {\r\n        props.onChangeKeySearch(keySearch);\r\n    };\r\n\r\n    return (\r\n        <div className=\"header-todolist\">\r\n            <a data-toggle=\"collapse\" href=\"#collapseOne\">\r\n                <i className='fas fa-angle-down'></i>\r\n      Todo List\r\n            </a>\r\n            <i className=\"fas fa-search search-active\" aria-hidden=\"true\" onClick={onSearchActiveClick}></i>\r\n            <div className=\"search-header\" ref={searchHeaderEl}>\r\n                <div className=\"search\">\r\n                    <i className=\"fas fa-arrow-left\" aria-hidden=\"true\" onClick={onSearchHiddenClick}></i>\r\n                    <input type=\"text\" placeholder=\"Search...\" value={keySearch} onChange={handleChangeInput} ref={inputEl} />\r\n                    <div className=\"button\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Search\" onClick={searchTodo}>\r\n                        <i className=\"fas fa-search search-button\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ModalAddTodo onChangeRefresh={props.onChangeRefresh} />\r\n        </div>\r\n    );\r\n}\r\nexport default HeaderTodoList;","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\FooterTodoList.tsx",["51"],"import '../App.css';\r\nimport React from 'react';\r\nimport AlertDialog from './AlertDialog';\r\nimport { PropsFooterTodoList } from '../model/type/todo';\r\nimport { Todo } from '../model/type/todo';\r\n\r\nfunction FooterTodoList(props: PropsFooterTodoList) {\r\n\r\n    const handleChangeFilter = (status: string) => {\r\n        props.onChangeFilter(status);\r\n    }\r\n\r\n    const countItemLeft = () => {\r\n        const todoListFilter: Todo[] = props.todoListFilter;\r\n        let count = 0;\r\n        todoListFilter.forEach(e => {\r\n            if (e.isCompleted === false) {\r\n                count++;\r\n            };\r\n        });\r\n        return count;\r\n    };\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"count-item\">{countItemLeft()} items left</div>\r\n            <div className=\"filter\">\r\n                <div onClick={() => handleChangeFilter(\"all\")} className={props.filter === \"all\" ? \"selected\" : \"\"}>All</div>\r\n                <div onClick={() => handleChangeFilter(\"active\")} className={props.filter === \"active\" ? \"selected\" : \"\"}>Active</div>\r\n                <div onClick={() => handleChangeFilter(\"completed\")} className={props.filter === \"completed\" ? \"selected\" : \"\"}> Completed</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FooterTodoList;","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\ModalAddTodo.tsx",["52","53","54","55","56","57","58","59","60","61"],"import '../App.css';\r\nimport React, { useState, useEffect } from 'react';\r\n// import { Button, Modal } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { PropsModalAddTodo, Todo, TypeTodo, TodoAdd, ErrorFormTodo } from '../model/type/todo';\r\nimport { gql, useMutation, useQuery } from '@apollo/client';\r\n\r\nconst ADD_TODO = gql`\r\n    mutation AddTodo($todo: TodoInput) {\r\n        addTodo(todo: $todo)\r\n    }\r\n`;\r\n\r\nconst GET_LIST_TYPE_TODO = gql`\r\n    query GetListTypeTodo{\r\n        getListTypeTodo {\r\n        key\r\n        value  \r\n        }\r\n    }\r\n`;\r\n\r\nfunction ModalAddTodo(props: PropsModalAddTodo) {\r\n    const [show, setShow] = useState(false);\r\n    const [fields, setFields] = useState<TodoAdd>({} as TodoAdd);\r\n    const [errors, setErrors] = useState<ErrorFormTodo>({} as ErrorFormTodo);\r\n    const [listTypeTodo, setListType] = useState<TypeTodo[]>([]);\r\n    const rows: JSX.Element[] = [];\r\n\r\n    const { data } = useQuery(GET_LIST_TYPE_TODO);\r\n\r\n    useEffect(() => {\r\n        setListType(data ? data.getListTypeTodo : [])\r\n    });\r\n\r\n    const handleClose = () => setShow(false);\r\n\r\n    const handleShow = () => {\r\n        setFields({} as TodoAdd);\r\n        setErrors({} as ErrorFormTodo);\r\n        setShow(true);\r\n    };\r\n\r\n    const handleValidation = () => {\r\n        let pushErrors: ErrorFormTodo = {} as ErrorFormTodo;\r\n        let formIsValid = true;\r\n\r\n        if (fields[\"todoName\"] == undefined) {\r\n            pushErrors[\"todoName\"] = \"\";\r\n            formIsValid = false;\r\n        } else if (fields[\"todoName\"].length === 0) {\r\n            pushErrors[\"todoName\"] = \"Todo name is required\";\r\n            formIsValid = false;\r\n        }\r\n        if (fields[\"type\"] == undefined) {\r\n            pushErrors[\"type\"] = \"\";\r\n            formIsValid = false;\r\n        } else if (fields[\"type\"].length === 0) {\r\n            pushErrors[\"type\"] = \"Type is required\";\r\n            formIsValid = false;\r\n        };\r\n        if (fields[\"deadline\"] == undefined) {\r\n            pushErrors[\"deadline\"] = \"\";\r\n            formIsValid = false;\r\n        } else if (fields[\"deadline\"].length === 0) {\r\n            pushErrors[\"deadline\"] = \"Deadline is required\";\r\n            formIsValid = false;\r\n        } else if (Date.parse(fields[\"deadline\"]) < (new Date()).getTime()) {\r\n            let d = new Date();\r\n            pushErrors[\"deadline\"] = \"Cannot choose a time in the past\";\r\n            formIsValid = false;\r\n        };\r\n        pushErrors[\"formIsValid\"] = formIsValid;\r\n        setErrors(pushErrors);\r\n    };\r\n\r\n    const handleChangeInput = (event: React.SyntheticEvent) => {\r\n        const target = event.target as HTMLInputElement;\r\n        if (target) {\r\n            const value = target.type === 'checkbox' ? target.checked : target.value;\r\n            const name: string = target.name;\r\n            // fields[name] = value;\r\n\r\n            if (name === \"todoName\") {\r\n                fields[\"todoName\"] = value as string;\r\n            } else if (name === \"type\") {\r\n                fields[\"type\"] = value as string;\r\n            } else if (name === \"deadline\") {\r\n                fields[\"deadline\"] = value as string;\r\n            }\r\n            setFields(fields);\r\n            handleValidation();\r\n        }\r\n    };\r\n\r\n    const [newTodo, { loading, error }] = useMutation(ADD_TODO);\r\n\r\n    const saveAddTodo = () => {\r\n        newTodo({ variables: { todo: fields } });\r\n        props.onChangeRefresh();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                <i className='fas fa-plus'></i>\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                {/* <Modal.Header closeButton> */}\r\n                <Modal.Header>\r\n                    <Modal.Title>Add Todo</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"form-group\">\r\n                        <label>Todo Name</label>\r\n                        <input type=\"text\" placeholder=\"Name...\" className=\"form-control\" name=\"todoName\" defaultValue={fields[\"todoName\"] || ''}\r\n                            onChange={handleChangeInput} onBlur={handleChangeInput} />\r\n                        <small>{errors[\"todoName\"] || ''}</small>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Type</label>\r\n                        <select className=\"form-control\" name=\"type\" defaultValue={fields[\"type\"] || ''}\r\n                            onChange={handleChangeInput} onBlur={handleChangeInput}>\r\n                            <option value=\"\" disabled>Open this select menu</option>\r\n                            {listTypeTodo.forEach((type: any) => {\r\n                                rows.push(<option value={type.key} key={type.key}>{type.value}</option>)\r\n                            })}\r\n                            {rows}\r\n                        </select>\r\n                        <small>{errors[\"type\"] || ''}</small>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Deadline</label>\r\n                        <input className=\"form-control\" type=\"datetime-local\" name=\"deadline\" defaultValue={fields[\"deadline\"] || ''}\r\n                            onChange={handleChangeInput} onBlur={handleChangeInput} />\r\n                        <small>{errors[\"deadline\"] || ''}</small>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Cancel\r\n            </Button>\r\n                    <Button variant=\"primary\" disabled={(errors[\"formIsValid\"] || false) === false ? true : false}\r\n                        onClick={() => { handleClose(); saveAddTodo(); }}>\r\n                        Save\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ModalAddTodo;","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\DataTodoListRow.tsx",["62","63","64","65"],"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\AlertDialog.tsx",["66","67","68","69","70","71"],"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\service\\todo-service.tsx",["72","73"],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":16},{"ruleId":"82","severity":1,"message":"83","line":46,"column":3,"nodeType":"80","endLine":46,"endColumn":12,"suggestions":"84"},{"ruleId":"78","severity":1,"message":"85","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":14},{"ruleId":"78","severity":1,"message":"86","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":19},{"ruleId":"78","severity":1,"message":"85","line":6,"column":29,"nodeType":"80","messageId":"81","endLine":6,"endColumn":33},{"ruleId":"78","severity":1,"message":"87","line":7,"column":10,"nodeType":"80","messageId":"81","endLine":7,"endColumn":18},{"ruleId":"78","severity":1,"message":"88","line":7,"column":20,"nodeType":"80","messageId":"81","endLine":7,"endColumn":35},{"ruleId":"82","severity":1,"message":"89","line":34,"column":5,"nodeType":"80","endLine":34,"endColumn":14,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":50,"column":32,"nodeType":"93","messageId":"94","endLine":50,"endColumn":34},{"ruleId":"91","severity":1,"message":"92","line":57,"column":28,"nodeType":"93","messageId":"94","endLine":57,"endColumn":30},{"ruleId":"91","severity":1,"message":"92","line":64,"column":32,"nodeType":"93","messageId":"94","endLine":64,"endColumn":34},{"ruleId":"78","severity":1,"message":"95","line":71,"column":17,"nodeType":"80","messageId":"81","endLine":71,"endColumn":18},{"ruleId":"78","severity":1,"message":"96","line":98,"column":23,"nodeType":"80","messageId":"81","endLine":98,"endColumn":30},{"ruleId":"78","severity":1,"message":"97","line":98,"column":32,"nodeType":"80","messageId":"81","endLine":98,"endColumn":37},{"ruleId":"78","severity":1,"message":"98","line":2,"column":38,"nodeType":"80","messageId":"81","endLine":2,"endColumn":44},{"ruleId":"78","severity":1,"message":"99","line":4,"column":38,"nodeType":"80","messageId":"81","endLine":4,"endColumn":53},{"ruleId":"78","severity":1,"message":"96","line":37,"column":33,"nodeType":"80","messageId":"81","endLine":37,"endColumn":40},{"ruleId":"78","severity":1,"message":"97","line":37,"column":42,"nodeType":"80","messageId":"81","endLine":37,"endColumn":47},{"ruleId":"78","severity":1,"message":"100","line":5,"column":8,"nodeType":"80","messageId":"81","endLine":5,"endColumn":21},{"ruleId":"78","severity":1,"message":"101","line":6,"column":8,"nodeType":"80","messageId":"81","endLine":6,"endColumn":25},{"ruleId":"78","severity":1,"message":"85","line":9,"column":10,"nodeType":"80","messageId":"81","endLine":9,"endColumn":14},{"ruleId":"78","severity":1,"message":"96","line":29,"column":26,"nodeType":"80","messageId":"81","endLine":29,"endColumn":33},{"ruleId":"78","severity":1,"message":"97","line":29,"column":35,"nodeType":"80","messageId":"81","endLine":29,"endColumn":40},{"ruleId":"102","severity":1,"message":"103","line":41,"column":21,"nodeType":"104","endLine":41,"endColumn":172},{"ruleId":"78","severity":1,"message":"85","line":2,"column":10,"nodeType":"80","messageId":"81","endLine":2,"endColumn":14},{"ruleId":"78","severity":1,"message":"99","line":2,"column":16,"nodeType":"80","messageId":"81","endLine":2,"endColumn":31},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"@typescript-eslint/no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setTodoList'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.",["107"],"'Todo' is defined but never used.","'AlertDialog' is defined but never used.","'postTodo' is defined but never used.","'getListTypeTodo' is defined but never used.","React Hook useEffect contains a call to 'setListType'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.",["108"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'d' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'useRef' is defined but never used.","'TodoIsCompleted' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"109","fix":"111"},"Add dependencies array: [data]",{"range":"112","text":"113"},{"range":"114","text":"113"},[1616,1616],", [data]",[1185,1185]]