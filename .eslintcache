[{"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\index.tsx":"1","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\reportWebVitals.ts":"2","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\App.tsx":"3","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\ContentTodoList.tsx":"4","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\HeaderTodoList.tsx":"5","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\FooterTodoList.tsx":"6","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\ModalAddTodo.tsx":"7","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\DataTodoListRow.tsx":"8","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\AlertDialog.tsx":"9","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\service\\todo-service.tsx":"10"},{"size":455,"mtime":1609863026005,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1857,"mtime":1609967779240,"results":"14","hashOfConfig":"12"},{"size":843,"mtime":1609967184110,"results":"15","hashOfConfig":"12"},{"size":1977,"mtime":1609966092482,"results":"16","hashOfConfig":"12"},{"size":1299,"mtime":1609959730586,"results":"17","hashOfConfig":"12"},{"size":5705,"mtime":1610385780755,"results":"18","hashOfConfig":"12"},{"size":3779,"mtime":1610386590941,"results":"19","hashOfConfig":"12"},{"size":2300,"mtime":1610383401201,"results":"20","hashOfConfig":"12"},{"size":892,"mtime":1609995460193,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"9l6dzx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"24"},"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\index.tsx",[],["50","51"],"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\reportWebVitals.ts",[],"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\App.tsx",["52"],"import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport HeaderTodoList from './component/HeaderTodoList';\nimport ContentTodoList from './component/ContentTodoList';\nimport { Todo } from './model/type/todo';\nimport { getTodoList } from './service/todo-service'\n\nfunction dataFilter(todoList: Todo[], filter: string, keySearch: string): Todo[] {\n  if (filter === \"all\") {\n    return todoList.filter(e => { return e.todoName.toUpperCase().indexOf(keySearch.toUpperCase()) > -1 });\n  } else if (filter === \"active\") {\n    return todoList.filter(e => { return (e.isCompleted === false) && e.todoName.toUpperCase().indexOf(keySearch.toUpperCase()) > -1 });\n  } else if (filter === \"completed\") {\n    return todoList.filter(e => { return (e.isCompleted === true) && e.todoName.toUpperCase().indexOf(keySearch.toUpperCase()) > -1 });\n  };\n  return [];\n}\n\nfunction App() {\n  const [todoList, setTodoList] = useState<Todo[]>([]);\n  const [filter, setFilter] = useState<string>(\"all\");\n  const [keySearch, setKeySearch] = useState<string>(\"\");\n  const [refresh, setRefresh] = useState<boolean>(false);\n\n  const handleChangeFilter = (status: string) => setFilter(status);\n\n  const handleChangeKeySearch = (key: string) => setKeySearch(key);\n\n  const handleChangeRefresh = () => setRefresh(!refresh);\n\n  useEffect(() => {\n    getTodoList().then(res => setTodoList(res.data));\n  }, [refresh]);\n\n  return (\n    <div className=\"package\">\n      <div className=\"todo-page\">\n        <HeaderTodoList onChangeKeySearch={handleChangeKeySearch} onChangeRefresh={handleChangeRefresh} />\n        <ContentTodoList todoListFilter={dataFilter(todoList, filter, keySearch)} filter={filter}\n          onChangeFilter={handleChangeFilter} onChangeRefresh={handleChangeRefresh} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\ContentTodoList.tsx",[],"D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\HeaderTodoList.tsx",["53"],"import '../App.css';\r\nimport React, { useRef, useState } from 'react';\r\nimport ModalAddTodo from './ModalAddTodo';\r\nimport { PropsHeaderTodoList } from '../model/type/todo';\r\nimport { Todo } from '../model/type/todo';\r\n\r\nfunction HeaderTodoList(props: PropsHeaderTodoList) {\r\n    const searchHeaderEl = useRef(document.createElement(\"div\"));\r\n    const inputEl = useRef(document.createElement(\"input\"));\r\n    const [keySearch, setKeySearch] = useState(\"\");\r\n\r\n    const onSearchActiveClick = () => {\r\n        searchHeaderEl.current.style.display = \"flex\";\r\n        inputEl.current.focus();\r\n    };\r\n\r\n    const onSearchHiddenClick = () => {\r\n        searchHeaderEl.current.style.display = \"none\";\r\n    };\r\n\r\n    const handleChangeInput = (event: any) => {\r\n        setKeySearch(event.target.value);\r\n    };\r\n\r\n    const searchTodo = () => {\r\n        props.onChangeKeySearch(keySearch);\r\n    };\r\n\r\n    return (\r\n        <div className=\"header-todolist\">\r\n            <a data-toggle=\"collapse\" href=\"#collapseOne\">\r\n                <i className='fas fa-angle-down'></i>\r\n      Todo List\r\n            </a>\r\n            <i className=\"fas fa-search search-active\" aria-hidden=\"true\" onClick={onSearchActiveClick}></i>\r\n            <div className=\"search-header\" ref={searchHeaderEl}>\r\n                <div className=\"search\">\r\n                    <i className=\"fas fa-arrow-left\" aria-hidden=\"true\" onClick={onSearchHiddenClick}></i>\r\n                    <input type=\"text\" placeholder=\"Search...\" value={keySearch} onChange={handleChangeInput} ref={inputEl} />\r\n                    <div className=\"button\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Search\" onClick={searchTodo}>\r\n                        <i className=\"fas fa-search search-button\" aria-hidden=\"true\"></i>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ModalAddTodo onChangeRefresh={props.onChangeRefresh} />\r\n        </div>\r\n    );\r\n}\r\nexport default HeaderTodoList;","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\FooterTodoList.tsx",["54"],"import '../App.css';\r\nimport React from 'react';\r\nimport AlertDialog from './AlertDialog';\r\nimport { PropsFooterTodoList } from '../model/type/todo';\r\nimport { Todo } from '../model/type/todo';\r\n\r\nfunction FooterTodoList(props: PropsFooterTodoList) {\r\n\r\n    const handleChangeFilter = (status: string) => {\r\n        props.onChangeFilter(status);\r\n    }\r\n\r\n    const countItemLeft = () => {\r\n        const todoListFilter: Todo[] = props.todoListFilter;\r\n        let count = 0;\r\n        todoListFilter.forEach(e => {\r\n            if (e.isCompleted === false) {\r\n                count++;\r\n            };\r\n        });\r\n        return count;\r\n    };\r\n\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"count-item\">{countItemLeft()} items left</div>\r\n            <div className=\"filter\">\r\n                <div onClick={() => handleChangeFilter(\"all\")} className={props.filter === \"all\" ? \"selected\" : \"\"}>All</div>\r\n                <div onClick={() => handleChangeFilter(\"active\")} className={props.filter === \"active\" ? \"selected\" : \"\"}>Active</div>\r\n                <div onClick={() => handleChangeFilter(\"completed\")} className={props.filter === \"completed\" ? \"selected\" : \"\"}> Completed</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FooterTodoList;","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\ModalAddTodo.tsx",["55","56","57","58","59"],"import '../App.css';\r\nimport React, { useState, useEffect } from 'react';\r\n// import { Button, Modal } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { PropsModalAddTodo, Todo, TypeTodo, TodoAdd, ErrorFormTodo } from '../model/type/todo';\r\nimport { postTodo, getListTypeTodo } from '../service/todo-service'\r\n\r\nfunction ModalAddTodo(props: PropsModalAddTodo) {\r\n    const [show, setShow] = useState(false);\r\n    const [fields, setFields] = useState<TodoAdd>({} as TodoAdd);\r\n    const [errors, setErrors] = useState<ErrorFormTodo>({} as ErrorFormTodo);\r\n    const [listTypeTodo, setListType] = useState<TypeTodo[]>([]);\r\n    const rows: JSX.Element[] = [];\r\n\r\n    useEffect(() => {\r\n        getListTypeTodo().then(res => setListType(res.data))\r\n    }, []);\r\n\r\n    const handleClose = () => setShow(false);\r\n\r\n    const handleShow = () => {\r\n        setFields({} as TodoAdd);\r\n        setErrors({} as ErrorFormTodo);\r\n        setShow(true);\r\n    };\r\n\r\n    const handleValidation = () => {\r\n        let pushErrors: ErrorFormTodo = {} as ErrorFormTodo;\r\n        let formIsValid = true;\r\n\r\n        if (fields[\"todoName\"] == undefined) {\r\n            pushErrors[\"todoName\"] = \"\";\r\n            formIsValid = false;\r\n        } else if (fields[\"todoName\"].length === 0) {\r\n            pushErrors[\"todoName\"] = \"Todo name is required\";\r\n            formIsValid = false;\r\n        }\r\n        if (fields[\"type\"] == undefined) {\r\n            pushErrors[\"type\"] = \"\";\r\n            formIsValid = false;\r\n        } else if (fields[\"type\"].length === 0) {\r\n            pushErrors[\"type\"] = \"Type is required\";\r\n            formIsValid = false;\r\n        };\r\n        if (fields[\"deadline\"] == undefined) {\r\n            pushErrors[\"deadline\"] = \"\";\r\n            formIsValid = false;\r\n        } else if (fields[\"deadline\"].length === 0) {\r\n            pushErrors[\"deadline\"] = \"Deadline is required\";\r\n            formIsValid = false;\r\n        } else if (Date.parse(fields[\"deadline\"]) < (new Date()).getTime()) {\r\n            let d = new Date();\r\n            pushErrors[\"deadline\"] = \"Cannot choose a time in the past\";\r\n            formIsValid = false;\r\n        };\r\n        pushErrors[\"formIsValid\"] = formIsValid;\r\n        setErrors(pushErrors);\r\n    };\r\n\r\n    const handleChangeInput = (event: React.SyntheticEvent) => {\r\n        const target = event.target as HTMLInputElement;\r\n        if (target) {\r\n            const value = target.type === 'checkbox' ? target.checked : target.value;\r\n            const name: string = target.name;\r\n            // fields[name] = value;\r\n\r\n            if (name === \"todoName\") {\r\n                fields[\"todoName\"] = value as string;\r\n            } else if (name === \"type\") {\r\n                fields[\"type\"] = value as string;\r\n            } else if (name === \"deadline\") {\r\n                fields[\"deadline\"] = value as string;\r\n            }\r\n            setFields(fields);\r\n            handleValidation();\r\n        }\r\n    };\r\n\r\n    const saveAddTodo = () => {\r\n        postTodo(fields).then(res => {\r\n            props.onChangeRefresh();\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                <i className='fas fa-plus'></i>\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                {/* <Modal.Header closeButton> */}\r\n                <Modal.Header>\r\n                    <Modal.Title>Add Todo</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"form-group\">\r\n                        <label>Todo Name</label>\r\n                        <input type=\"text\" placeholder=\"Name...\" className=\"form-control\" name=\"todoName\" defaultValue={fields[\"todoName\"] || ''}\r\n                            onChange={handleChangeInput} onBlur={handleChangeInput} />\r\n                        <small>{errors[\"todoName\"] || ''}</small>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Type</label>\r\n                        <select className=\"form-control\" name=\"type\" defaultValue={fields[\"type\"] || ''}\r\n                            onChange={handleChangeInput} onBlur={handleChangeInput}>\r\n                            <option value=\"\" disabled>Open this select menu</option>\r\n                            {listTypeTodo.forEach((type: any) => {\r\n                                rows.push(<option value={type.key} key={type.key}>{type.value}</option>)\r\n                            })}\r\n                            {rows}\r\n                        </select>\r\n                        <small>{errors[\"type\"] || ''}</small>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label>Deadline</label>\r\n                        <input className=\"form-control\" type=\"datetime-local\" name=\"deadline\" defaultValue={fields[\"deadline\"] || ''}\r\n                            onChange={handleChangeInput} onBlur={handleChangeInput} />\r\n                        <small>{errors[\"deadline\"] || ''}</small>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Cancel\r\n            </Button>\r\n                    <Button variant=\"primary\" disabled={(errors[\"formIsValid\"] || false) === false ? true : false} onClick={() => { handleClose(); saveAddTodo(); }}>\r\n                        Save\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ModalAddTodo;","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\DataTodoListRow.tsx",["60"],"import '../App.css';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport AlertDialog from './AlertDialog';\r\nimport { PropsDataTodoListRow, Todo, TodoIsCompleted } from '../model/type/todo';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport moment from 'moment';\r\nimport 'moment-timezone';\r\nimport { putIsCompletedTodo } from '../service/todo-service';\r\n\r\nfunction DataTodoListRow(props: PropsDataTodoListRow) {\r\n    const period = Math.floor((Date.parse(props.todo.deadline) - (new Date()).getTime()) / 60000); //khởi tạo khoảng thời gian sát deadline\r\n    const [minutesCompare, setMinutesCompare] = useState<number>(period);\r\n    const [show, setShow] = useState(false);\r\n\r\n    useEffect(() => {\r\n        let loopCheck = setInterval(() => {\r\n            const periodUpdate = Math.floor((Date.parse(props.todo.deadline) - (new Date()).getTime()) / 60000); //update khoảng time sát deadline\r\n            setMinutesCompare(periodUpdate);\r\n        }, 1000);\r\n        return () => {\r\n            clearInterval(loopCheck);\r\n        };\r\n    });\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const todo: Todo = props.todo;\r\n\r\n    const handleCompletedChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const status = e.target.checked;\r\n        const body: TodoIsCompleted = { isCompleted: status };\r\n        putIsCompletedTodo(todo.id, body).then(res => {\r\n            props.onChangeRefresh();\r\n        });\r\n    };\r\n\r\n    const days = Math.floor(minutesCompare / 1440);\r\n    const timeRemaining = days + ' day(s), ' +\r\n        Math.floor((minutesCompare - (days * 1440)) / 60) + ' hour(s), ' +\r\n        Math.round(minutesCompare % 60) + ' minute(s)'\r\n    // console.log(\"minutesCompare\", minutesCompare);\r\n\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} animation={false}>\r\n                <Modal.Header>\r\n                    <Modal.Title>Todo Detail</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>{todo.id}</p>\r\n                    <label>Todo Name: </label>\r\n                    <p>{todo.todoName}</p>\r\n                    <label>Type: </label>\r\n                    <p>{todo.type}</p>\r\n                    <label>Deadline: </label>\r\n                    <p>\r\n                        {moment(todo.deadline).format('DD/MM/YYYY hh:mm A')}\r\n                    </p>\r\n                    <label>Time remaining: </label>\r\n                    <p>\r\n                        {minutesCompare > 0 ? timeRemaining : \"Time Out\"}\r\n                    </p>\r\n                    <label>Status: </label>\r\n                    <p>{todo.isCompleted === true ? \"Completed\" : \"Active\"}</p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <li className=\"row\">\r\n                <div className=\"col-2\">\r\n                    <div className=\"round\">\r\n                        <input type=\"checkbox\" id={todo.id.toString()} name=\"todoName\" checked={todo.isCompleted} onChange={handleCompletedChange} />\r\n                        <label htmlFor={todo.id.toString()}></label>\r\n                    </div>\r\n                </div>\r\n                <div className={props.todo.isCompleted ? \"col-8 completed\" : \"col-8\"} onClick={handleShow}><span>{todo.todoName}</span></div>\r\n                <AlertDialog todo={props.todo} minutesCompare={minutesCompare} onChangeRefresh={props.onChangeRefresh} />\r\n            </li>\r\n        </>\r\n    );\r\n}\r\nexport default DataTodoListRow;","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\component\\AlertDialog.tsx",["61","62","63"],"import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { PropsAlertDialog } from '../model/type/todo';\r\nimport { Todo } from '../model/type/todo';\r\nimport { delTodo } from \"../service/todo-service\"\r\n\r\nexport default function AlertDialog(props: PropsAlertDialog) {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const deleteTodo = () => {\r\n        const todo: Todo = props.todo;\r\n        delTodo(todo.id).then(res => {\r\n            props.onChangeRefresh();\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"col-2 delete\">\r\n                {props.minutesCompare <= 0 ? <i className='far fa-calendar-times' data-toggle=\"tooltip\" title=\"Time Out\"></i> : \"\"}\r\n                {props.minutesCompare <= 15 && props.minutesCompare > 0 ?\r\n                    <img src=\"../../Alarm_Clock.gif\" className=\"alert-deadline\" data-toggle=\"tooltip\" title={props.minutesCompare + ' minutes left before the deadline'} /> : \"\"}\r\n                <i className='fas fa-trash-alt' data-toggle=\"tooltip\" title=\"Delete\" onClick={handleClickOpen}></i>\r\n            </div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{\"Are you sure you want to remove Item?\"}</DialogTitle>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Disagree\r\n                    </Button>\r\n                    <Button onClick={() => { handleClose(); deleteTodo(); }} color=\"primary\" autoFocus>\r\n                        Agree\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}","D:\\Thuc tap cong ty NCC\\Learn React\\BT React\\my-app-react-tyscript\\src\\service\\todo-service.tsx",["64"],"import axios from 'axios';\r\nimport { Todo, TodoIsCompleted, TodoAdd } from '../model/type/todo';\r\n\r\nconst baseURL = 'http://localhost:3001/';\r\n\r\nexport const getListTypeTodo = async () => {\r\n    let result = await axios.get(baseURL + 'getlistTypeTodo');\r\n    return result.data;\r\n};\r\n\r\nexport const getTodoList = async () => {\r\n    let result = await axios.get(baseURL + 'todoList');\r\n    return result.data;\r\n};\r\n\r\nexport const postTodo = async (todo: TodoAdd) => {\r\n    let result = await axios.post(baseURL + 'todoList', todo);\r\n    return result.data;\r\n}\r\n\r\nexport const putIsCompletedTodo = async (id: number, todo: TodoIsCompleted) => {\r\n    let result = await axios.put(baseURL + 'todoList?id=' + id, todo);\r\n    return result.data;\r\n}\r\n\r\nexport const delTodo = async (id: number) => {\r\n    let result = await axios.delete(baseURL + 'todoList?id=' + id)\r\n    return result.data;\r\n}\r\n\r\n",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":3,"column":8,"nodeType":"71","messageId":"72","endLine":3,"endColumn":16},{"ruleId":"69","severity":1,"message":"73","line":5,"column":10,"nodeType":"71","messageId":"72","endLine":5,"endColumn":14},{"ruleId":"69","severity":1,"message":"74","line":3,"column":8,"nodeType":"71","messageId":"72","endLine":3,"endColumn":19},{"ruleId":"69","severity":1,"message":"73","line":6,"column":29,"nodeType":"71","messageId":"72","endLine":6,"endColumn":33},{"ruleId":"75","severity":1,"message":"76","line":32,"column":32,"nodeType":"77","messageId":"78","endLine":32,"endColumn":34},{"ruleId":"75","severity":1,"message":"76","line":39,"column":28,"nodeType":"77","messageId":"78","endLine":39,"endColumn":30},{"ruleId":"75","severity":1,"message":"76","line":46,"column":32,"nodeType":"77","messageId":"78","endLine":46,"endColumn":34},{"ruleId":"69","severity":1,"message":"79","line":53,"column":17,"nodeType":"71","messageId":"72","endLine":53,"endColumn":18},{"ruleId":"69","severity":1,"message":"80","line":2,"column":38,"nodeType":"71","messageId":"72","endLine":2,"endColumn":44},{"ruleId":"69","severity":1,"message":"81","line":5,"column":8,"nodeType":"71","messageId":"72","endLine":5,"endColumn":21},{"ruleId":"69","severity":1,"message":"82","line":6,"column":8,"nodeType":"71","messageId":"72","endLine":6,"endColumn":25},{"ruleId":"83","severity":1,"message":"84","line":35,"column":21,"nodeType":"85","endLine":35,"endColumn":172},{"ruleId":"69","severity":1,"message":"73","line":2,"column":10,"nodeType":"71","messageId":"72","endLine":2,"endColumn":14},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"@typescript-eslint/no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'Todo' is defined but never used.","'AlertDialog' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'d' is assigned a value but never used.","'useRef' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]